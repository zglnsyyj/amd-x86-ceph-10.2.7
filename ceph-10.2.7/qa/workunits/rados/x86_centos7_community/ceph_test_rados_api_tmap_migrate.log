Running main() from gmock_main.cc
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from TmapMigratePP
[ RUN      ] TmapMigratePP.DataScan
*** Caught signal (Segmentation fault) **
 in thread 7f0bdd09ebc0 thread_name:ceph_test_rados
 ceph version 10.2.7 (50e863e0f4bc8f4b9e31156de690d765af245185)
 1: (()+0x572faa) [0x7f0bdd62bfaa]
 2: (()+0xf5e0) [0x7f0bd26ff5e0]
 3: (()+0x18c798) [0x7f0bd3896798]
 4: (()+0xcafe6) [0x7f0bd37d4fe6]
 5: (()+0xcb5ef) [0x7f0bd37d55ef]
 6: (()+0x9a88f) [0x7f0bd37a488f]
 7: (DataScan::main(std::vector<char const*, std::allocator<char const*> > const&)+0x6e3) [0x7f0bdd2d0db3]
 8: (TmapMigratePP_DataScan_Test::TestBody()+0x89d) [0x7f0bdd2d934d]
 9: (void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*)+0x43) [0x7f0bdd3269e3]
 10: (testing::Test::Run()+0xb7) [0x7f0bdd3180e7]
 11: (testing::TestInfo::Run()+0x9e) [0x7f0bdd31818e]
 12: (testing::TestCase::Run()+0xa5) [0x7f0bdd318295]
 13: (testing::internal::UnitTestImpl::RunAllTests()+0x268) [0x7f0bdd318568]
 14: (testing::UnitTest::Run()+0x68) [0x7f0bdd318828]
 15: (main()+0x39) [0x7f0bdd2d1a99]
 16: (__libc_start_main()+0xf5) [0x7f0bd1710c05]
 17: (()+0x21f9bf) [0x7f0bdd2d89bf]
2018-03-05 14:32:01.858156 7f0bdd09ebc0 -1 *** Caught signal (Segmentation fault) **
 in thread 7f0bdd09ebc0 thread_name:ceph_test_rados

 ceph version 10.2.7 (50e863e0f4bc8f4b9e31156de690d765af245185)
 1: (()+0x572faa) [0x7f0bdd62bfaa]
 2: (()+0xf5e0) [0x7f0bd26ff5e0]
 3: (()+0x18c798) [0x7f0bd3896798]
 4: (()+0xcafe6) [0x7f0bd37d4fe6]
 5: (()+0xcb5ef) [0x7f0bd37d55ef]
 6: (()+0x9a88f) [0x7f0bd37a488f]
 7: (DataScan::main(std::vector<char const*, std::allocator<char const*> > const&)+0x6e3) [0x7f0bdd2d0db3]
 8: (TmapMigratePP_DataScan_Test::TestBody()+0x89d) [0x7f0bdd2d934d]
 9: (void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*)+0x43) [0x7f0bdd3269e3]
 10: (testing::Test::Run()+0xb7) [0x7f0bdd3180e7]
 11: (testing::TestInfo::Run()+0x9e) [0x7f0bdd31818e]
 12: (testing::TestCase::Run()+0xa5) [0x7f0bdd318295]
 13: (testing::internal::UnitTestImpl::RunAllTests()+0x268) [0x7f0bdd318568]
 14: (testing::UnitTest::Run()+0x68) [0x7f0bdd318828]
 15: (main()+0x39) [0x7f0bdd2d1a99]
 16: (__libc_start_main()+0xf5) [0x7f0bd1710c05]
 17: (()+0x21f9bf) [0x7f0bdd2d89bf]
 NOTE: a copy of the executable, or `objdump -rdS <executable>` is needed to interpret this.

--- begin dump of recent events ---
   -64> 2018-03-05 14:31:54.940921 7f0bdd09ebc0  5 asok(0x7f0be804a500) register_command perfcounters_dump hook 0x7f0be8026210
   -63> 2018-03-05 14:31:54.940964 7f0bdd09ebc0  5 asok(0x7f0be804a500) register_command 1 hook 0x7f0be8026210
   -62> 2018-03-05 14:31:54.940968 7f0bdd09ebc0  5 asok(0x7f0be804a500) register_command perf dump hook 0x7f0be8026210
   -61> 2018-03-05 14:31:54.940973 7f0bdd09ebc0  5 asok(0x7f0be804a500) register_command perfcounters_schema hook 0x7f0be8026210
   -60> 2018-03-05 14:31:54.940992 7f0bdd09ebc0  5 asok(0x7f0be804a500) register_command 2 hook 0x7f0be8026210
   -59> 2018-03-05 14:31:54.940996 7f0bdd09ebc0  5 asok(0x7f0be804a500) register_command perf schema hook 0x7f0be8026210
   -58> 2018-03-05 14:31:54.940999 7f0bdd09ebc0  5 asok(0x7f0be804a500) register_command perf reset hook 0x7f0be8026210
   -57> 2018-03-05 14:31:54.941003 7f0bdd09ebc0  5 asok(0x7f0be804a500) register_command config show hook 0x7f0be8026210
   -56> 2018-03-05 14:31:54.941008 7f0bdd09ebc0  5 asok(0x7f0be804a500) register_command config set hook 0x7f0be8026210
   -55> 2018-03-05 14:31:54.941011 7f0bdd09ebc0  5 asok(0x7f0be804a500) register_command config get hook 0x7f0be8026210
   -54> 2018-03-05 14:31:54.941013 7f0bdd09ebc0  5 asok(0x7f0be804a500) register_command config diff hook 0x7f0be8026210
   -53> 2018-03-05 14:31:54.941016 7f0bdd09ebc0  5 asok(0x7f0be804a500) register_command log flush hook 0x7f0be8026210
   -52> 2018-03-05 14:31:54.941019 7f0bdd09ebc0  5 asok(0x7f0be804a500) register_command log dump hook 0x7f0be8026210
   -51> 2018-03-05 14:31:54.941023 7f0bdd09ebc0  5 asok(0x7f0be804a500) register_command log reopen hook 0x7f0be8026210
   -50> 2018-03-05 14:32:01.841081 7f0bdd09ebc0  1 accepter.accepter.bind my_inst.addr is 0.0.0.0:6801/81597640 need_addr=1
   -49> 2018-03-05 14:32:01.841132 7f0bdd09ebc0  1 -- 0.0.0.0:6801/81597640 messenger.start
   -48> 2018-03-05 14:32:01.841210 7f0bdd09ebc0  5 asok(0x7f0be804a500) register_command objecter_requests hook 0x7f0be8026260
   -47> 2018-03-05 14:32:01.841400 7f0bdd09ebc0  1 accepter.accepter.start
   -46> 2018-03-05 14:32:01.841448 7f0bdd09ebc0 10 monclient(hunting): build_initial_monmap
   -45> 2018-03-05 14:32:01.841568 7f0bdd09ebc0 10 monclient(hunting): init
   -44> 2018-03-05 14:32:01.841619 7f0bdd09ebc0  5 adding auth protocol: cephx
   -43> 2018-03-05 14:32:01.841637 7f0bdd09ebc0 10 monclient(hunting): auth_supported 2 method cephx
   -42> 2018-03-05 14:32:01.842066 7f0bdd09ebc0  2 auth: KeyRing::load: loaded key file /etc/ceph/ceph.client.admin.keyring
   -41> 2018-03-05 14:32:01.842763 7f0bdd09ebc0 10 monclient(hunting): _reopen_session rank -1 name 
   -40> 2018-03-05 14:32:01.843003 7f0bdd09ebc0 10 monclient(hunting): picked mon.noname-c con 0x7f0be805b080 addr 192.168.100.76:6789/0
   -39> 2018-03-05 14:32:01.843038 7f0bdd09ebc0 10 monclient(hunting): _send_mon_message to mon.noname-c at 192.168.100.76:6789/0
   -38> 2018-03-05 14:32:01.843064 7f0bdd09ebc0  1 -- 0.0.0.0:6801/81597640 --> 192.168.100.76:6789/0 -- auth(proto 0 30 bytes epoch 0) v1 -- ?+0 0x7f0be8060f40 con 0x7f0be805b080
   -37> 2018-03-05 14:32:01.843141 7f0bdd09ebc0 10 monclient(hunting): renew_subs
   -36> 2018-03-05 14:32:01.845313 7f0bc5304700  1 -- 192.168.100.74:6801/81597640 learned my addr 192.168.100.74:6801/81597640
   -35> 2018-03-05 14:32:01.849182 7f0bc5203700  2 -- 192.168.100.74:6801/81597640 >> 192.168.100.76:6789/0 pipe(0x7f0be815a000 sd=7 :42098 s=2 pgs=355 cs=1 l=1 c=0x7f0be805b080).reader got KEEPALIVE_ACK
   -34> 2018-03-05 14:32:01.849382 7f0bc7b09700  1 -- 192.168.100.74:6801/81597640 <== mon.2 192.168.100.76:6789/0 1 ==== mon_map magic: 0 v1 ==== 512+0+0 (2350962666 0 0) 0x7f0be813c1c0 con 0x7f0be805b080
   -33> 2018-03-05 14:32:01.849431 7f0bc7b09700 10 monclient(hunting): handle_monmap mon_map magic: 0 v1
   -32> 2018-03-05 14:32:01.849441 7f0bc7b09700 10 monclient(hunting):  got monmap 1, mon.noname-c is now rank -1
   -31> 2018-03-05 14:32:01.849446 7f0bc7b09700 10 monclient(hunting): dump:
epoch 1
fsid 2897b33c-cd74-4ce2-8a54-ca958e426319
last_changed 2018-03-02 21:04:24.770251
created 2018-03-02 21:04:24.770251
0: 192.168.100.74:6789/0 mon.centos7-ceph-1
1: 192.168.100.75:6789/0 mon.centos7-ceph-2
2: 192.168.100.76:6789/0 mon.centos7-ceph-3

   -30> 2018-03-05 14:32:01.849499 7f0bc7b09700  1 -- 192.168.100.74:6801/81597640 <== mon.2 192.168.100.76:6789/0 2 ==== auth_reply(proto 2 0 (0) Success) v1 ==== 33+0+0 (1232553179 0 0) 0x7f0be813c400 con 0x7f0be805b080
   -29> 2018-03-05 14:32:01.849617 7f0bc7b09700 10 monclient(hunting): my global_id is 4955
   -28> 2018-03-05 14:32:01.849702 7f0bc7b09700 10 monclient(hunting): _send_mon_message to mon.centos7-ceph-3 at 192.168.100.76:6789/0
   -27> 2018-03-05 14:32:01.849713 7f0bc7b09700  1 -- 192.168.100.74:6801/81597640 --> 192.168.100.76:6789/0 -- auth(proto 2 32 bytes epoch 0) v1 -- ?+0 0x7f0be813c1c0 con 0x7f0be805b080
   -26> 2018-03-05 14:32:01.850875 7f0bc7b09700  1 -- 192.168.100.74:6801/81597640 <== mon.2 192.168.100.76:6789/0 3 ==== auth_reply(proto 2 0 (0) Success) v1 ==== 206+0+0 (3015684882 0 0) 0x7f0be813c640 con 0x7f0be805b080
   -25> 2018-03-05 14:32:01.850952 7f0bc7b09700 10 monclient(hunting): _send_mon_message to mon.centos7-ceph-3 at 192.168.100.76:6789/0
   -24> 2018-03-05 14:32:01.850959 7f0bc7b09700  1 -- 192.168.100.74:6801/81597640 --> 192.168.100.76:6789/0 -- auth(proto 2 165 bytes epoch 0) v1 -- ?+0 0x7f0be813c400 con 0x7f0be805b080
   -23> 2018-03-05 14:32:01.852209 7f0bc7b09700  1 -- 192.168.100.74:6801/81597640 <== mon.2 192.168.100.76:6789/0 4 ==== auth_reply(proto 2 0 (0) Success) v1 ==== 580+0+0 (68898298 0 0) 0x7f0be813c1c0 con 0x7f0be805b080
   -22> 2018-03-05 14:32:01.852297 7f0bc7b09700  1 monclient(hunting): found mon.centos7-ceph-3
   -21> 2018-03-05 14:32:01.852305 7f0bc7b09700 10 monclient: _send_mon_message to mon.centos7-ceph-3 at 192.168.100.76:6789/0
   -20> 2018-03-05 14:32:01.852309 7f0bc7b09700  1 -- 192.168.100.74:6801/81597640 --> 192.168.100.76:6789/0 -- mon_subscribe({monmap=0+}) v2 -- ?+0 0x7f0be80bb000 con 0x7f0be805b080
   -19> 2018-03-05 14:32:01.852357 7f0bdd09ebc0  5 monclient: authenticate success, global_id 4955
   -18> 2018-03-05 14:32:01.852406 7f0bdd09ebc0 10 monclient: renew_subs
   -17> 2018-03-05 14:32:01.852411 7f0bdd09ebc0 10 monclient: _send_mon_message to mon.centos7-ceph-3 at 192.168.100.76:6789/0
   -16> 2018-03-05 14:32:01.852418 7f0bdd09ebc0  1 -- 192.168.100.74:6801/81597640 --> 192.168.100.76:6789/0 -- mon_subscribe({osdmap=0}) v2 -- ?+0 0x7f0be80ba400 con 0x7f0be805b080
   -15> 2018-03-05 14:32:01.852914 7f0bc7b09700  1 -- 192.168.100.74:6801/81597640 <== mon.2 192.168.100.76:6789/0 5 ==== mon_map magic: 0 v1 ==== 512+0+0 (2350962666 0 0) 0x7f0be813cac0 con 0x7f0be805b080
   -14> 2018-03-05 14:32:01.852934 7f0bc7b09700 10 monclient: handle_monmap mon_map magic: 0 v1
   -13> 2018-03-05 14:32:01.852941 7f0bc7b09700 10 monclient:  got monmap 1, mon.centos7-ceph-3 is now rank 2
   -12> 2018-03-05 14:32:01.852947 7f0bc7b09700 10 monclient: dump:
epoch 1
fsid 2897b33c-cd74-4ce2-8a54-ca958e426319
last_changed 2018-03-02 21:04:24.770251
created 2018-03-02 21:04:24.770251
0: 192.168.100.74:6789/0 mon.centos7-ceph-1
1: 192.168.100.75:6789/0 mon.centos7-ceph-2
2: 192.168.100.76:6789/0 mon.centos7-ceph-3

   -11> 2018-03-05 14:32:01.853163 7f0bc7b09700  1 -- 192.168.100.74:6801/81597640 <== mon.2 192.168.100.76:6789/0 6 ==== osd_map(372..372 src has 1..372) v3 ==== 8009+0+0 (1943301791 0 0) 0x7f0be8060f40 con 0x7f0be805b080
   -10> 2018-03-05 14:32:01.853567 7f0bdd09ebc0 10 monclient: renew_subs
    -9> 2018-03-05 14:32:01.853580 7f0bdd09ebc0 10 monclient: _send_mon_message to mon.centos7-ceph-3 at 192.168.100.76:6789/0
    -8> 2018-03-05 14:32:01.853588 7f0bdd09ebc0  1 -- 192.168.100.74:6801/81597640 --> 192.168.100.76:6789/0 -- mon_subscribe({fsmap=0}) v2 -- ?+0 0x7f0be80ba600 con 0x7f0be805b080
    -7> 2018-03-05 14:32:01.853618 7f0bdd09ebc0  4 waiting for MDS map...
    -6> 2018-03-05 14:32:01.854464 7f0bc7b09700  1 -- 192.168.100.74:6801/81597640 <== mon.2 192.168.100.76:6789/0 7 ==== fsmap(e 1) v1 ==== 319+0+0 (74130721 0 0) 0x7f0be81003c0 con 0x7f0be805b080
    -5> 2018-03-05 14:32:01.854519 7f0bdd09ebc0  4 Got MDS map 1
    -4> 2018-03-05 14:32:01.854727 7f0bdd09ebc0 10 monclient(hunting): build_initial_monmap
    -3> 2018-03-05 14:32:01.854815 7f0bdd09ebc0  1 librados: starting msgr at :/0
    -2> 2018-03-05 14:32:01.854823 7f0bdd09ebc0  1 librados: starting objecter
    -1> 2018-03-05 14:32:01.854924 7f0bdd09ebc0  5 asok(0x7f0be804a500) register_command objecter_requests hook 0x7f0be80262e0 EEXIST
     0> 2018-03-05 14:32:01.858156 7f0bdd09ebc0 -1 *** Caught signal (Segmentation fault) **
 in thread 7f0bdd09ebc0 thread_name:ceph_test_rados

 ceph version 10.2.7 (50e863e0f4bc8f4b9e31156de690d765af245185)
 1: (()+0x572faa) [0x7f0bdd62bfaa]
 2: (()+0xf5e0) [0x7f0bd26ff5e0]
 3: (()+0x18c798) [0x7f0bd3896798]
 4: (()+0xcafe6) [0x7f0bd37d4fe6]
 5: (()+0xcb5ef) [0x7f0bd37d55ef]
 6: (()+0x9a88f) [0x7f0bd37a488f]
 7: (DataScan::main(std::vector<char const*, std::allocator<char const*> > const&)+0x6e3) [0x7f0bdd2d0db3]
 8: (TmapMigratePP_DataScan_Test::TestBody()+0x89d) [0x7f0bdd2d934d]
 9: (void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*)+0x43) [0x7f0bdd3269e3]
 10: (testing::Test::Run()+0xb7) [0x7f0bdd3180e7]
 11: (testing::TestInfo::Run()+0x9e) [0x7f0bdd31818e]
 12: (testing::TestCase::Run()+0xa5) [0x7f0bdd318295]
 13: (testing::internal::UnitTestImpl::RunAllTests()+0x268) [0x7f0bdd318568]
 14: (testing::UnitTest::Run()+0x68) [0x7f0bdd318828]
 15: (main()+0x39) [0x7f0bdd2d1a99]
 16: (__libc_start_main()+0xf5) [0x7f0bd1710c05]
 17: (()+0x21f9bf) [0x7f0bdd2d89bf]
 NOTE: a copy of the executable, or `objdump -rdS <executable>` is needed to interpret this.

--- logging levels ---
   0/ 5 none
   0/ 1 lockdep
   0/ 1 context
   1/ 1 crush
   1/ 5 mds
   1/ 5 mds_balancer
   1/ 5 mds_locker
   1/ 5 mds_log
   1/ 5 mds_log_expire
   1/ 5 mds_migrator
   0/ 1 buffer
   0/ 1 timer
   0/ 1 filer
   0/ 1 striper
   0/ 1 objecter
   0/ 5 rados
   0/ 5 rbd
   0/ 5 rbd_mirror
   0/ 5 rbd_replay
   0/ 5 journaler
   0/ 5 objectcacher
   0/ 5 client
   0/ 5 osd
   0/ 5 optracker
   0/ 5 objclass
   1/ 3 filestore
   1/ 3 journal
   0/ 5 ms
   1/ 5 mon
   0/10 monc
   1/ 5 paxos
   0/ 5 tp
   1/ 5 auth
   1/ 5 crypto
   1/ 1 finisher
   1/ 5 heartbeatmap
   1/ 5 perfcounter
   1/ 5 rgw
   1/10 civetweb
   1/ 5 javaclient
   1/ 5 asok
   1/ 1 throttle
   0/ 0 refs
   1/ 5 xio
   1/ 5 compressor
   1/ 5 newstore
   1/ 5 bluestore
   1/ 5 bluefs
   1/ 3 bdev
   1/ 5 kstore
   4/ 5 rocksdb
   4/ 5 leveldb
   1/ 5 kinetic
   1/ 5 fuse
  -2/-2 (syslog threshold)
  99/99 (stderr threshold)
  max_recent       500
  max_new         1000
  log_file 
--- end dump of recent events ---
